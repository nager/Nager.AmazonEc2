using Amazon.EC2;
using Amazon.EC2.Model;
using log4net;
using Nager.AmazonEc2.Helper;
using Nager.AmazonEc2.InstallScript;
using Nager.AmazonEc2.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;

namespace Nager.AmazonEc2.Project
{
    public class RabbitMq
    {
        private static readonly ILog Log = LogManager.GetLogger(typeof(RabbitMq));
        private AmazonEC2Client _client;

        public RabbitMq(AmazonAccessKey accessKey)
        {
            this._client = new AmazonEC2Client(accessKey.AccessKeyId, accessKey.SecretKey, Amazon.RegionEndpoint.EUWest1);
        }

        private string CreateSecurityGroup(string prefix)
        {
            var name = $"{prefix}.RabbitMQ";
            var description = "This security group was generated by Nager.AmazonEc2 System";

            try
            {
                var result = this._client.DescribeSecurityGroups(new DescribeSecurityGroupsRequest() { GroupNames = new List<string> { name } });
                if (result.HttpStatusCode == HttpStatusCode.OK)
                {
                    return result.SecurityGroups.Select(o => o.GroupId).FirstOrDefault();
                }
            }
            catch (AmazonEC2Exception exception)
            {
                if (exception.ErrorCode != "InvalidGroup.NotFound")
                {
                    return null;
                }
            }

            var createSecurityGroupRequest = new CreateSecurityGroupRequest(name, description);
            var createSecurityGroupResponse = this._client.CreateSecurityGroup(createSecurityGroupRequest);

            if (createSecurityGroupResponse.HttpStatusCode != HttpStatusCode.OK)
            {
                return null;
            }

            var ipPermissionWebinterface = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 15672,
                ToPort = 15672,
                IpRanges = new List<string>() { "0.0.0.0/0" }
            };

            var ipPermissionEpmd = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 4369,
                ToPort = 4369,
                UserIdGroupPairs = new List<UserIdGroupPair>() { new UserIdGroupPair() { GroupId = createSecurityGroupResponse.GroupId } }
            };

            var ipPermissionErland = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 25672,
                ToPort = 25672,
                UserIdGroupPairs = new List<UserIdGroupPair>() { new UserIdGroupPair() { GroupId = createSecurityGroupResponse.GroupId } }
            };

            var ipPermissionAmqp = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 5671,
                ToPort = 5672,
                UserIdGroupPairs = new List<UserIdGroupPair>() { new UserIdGroupPair() { GroupId = createSecurityGroupResponse.GroupId } }
            };

            var ipPermissionStomp = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 61613,
                ToPort = 61614,
                UserIdGroupPairs = new List<UserIdGroupPair>() { new UserIdGroupPair() { GroupId = createSecurityGroupResponse.GroupId } }
            };

            var ipPermissionMqtt1 = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 1883,
                ToPort = 1883,
                UserIdGroupPairs = new List<UserIdGroupPair>() { new UserIdGroupPair() { GroupId = createSecurityGroupResponse.GroupId } }
            };

            var ipPermissionMqtt2 = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 8883,
                ToPort = 8883,
                UserIdGroupPairs = new List<UserIdGroupPair>() { new UserIdGroupPair() { GroupId = createSecurityGroupResponse.GroupId } }
            };

            var ipPermissionSsh = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 22,
                ToPort = 22,
                IpRanges = new List<string>() { "0.0.0.0/0" },
            };

            var ingressRequest = new AuthorizeSecurityGroupIngressRequest();
            ingressRequest.GroupId = createSecurityGroupResponse.GroupId;
            ingressRequest.IpPermissions = new List<IpPermission>();
            ingressRequest.IpPermissions.Add(ipPermissionWebinterface);
            ingressRequest.IpPermissions.Add(ipPermissionEpmd);
            ingressRequest.IpPermissions.Add(ipPermissionErland);
            ingressRequest.IpPermissions.Add(ipPermissionAmqp);
            ingressRequest.IpPermissions.Add(ipPermissionStomp);
            ingressRequest.IpPermissions.Add(ipPermissionMqtt1);
            ingressRequest.IpPermissions.Add(ipPermissionMqtt2);
            ingressRequest.IpPermissions.Add(ipPermissionSsh);

            var ingressResponse = this._client.AuthorizeSecurityGroupIngress(ingressRequest);
            if (ingressResponse.HttpStatusCode != HttpStatusCode.OK)
            {
                return null;
            }

            return createSecurityGroupResponse.GroupId;
        }

        public string GetManagementUrl(List<InstallResult> installResults)
        {
            var results = this._client.DescribeInstances(new DescribeInstancesRequest() { InstanceIds = new List<string> { installResults.First().InstanceId } });
            var publicUrl = results.Reservations[0]?.Instances[0]?.PublicDnsName;

            return $"http://{publicUrl}:15672/";
        }

        public List<InstallResult> InstallCluster(RabbitMqClusterConfig clusterConfig)
        {
            Log.Debug("InstallCluster");

            var securityGroupId = this.CreateSecurityGroup(clusterConfig.Prefix);
            var hash = Guid.NewGuid().ToString();
            var instanceInfo = InstanceInfoHelper.GetInstanceInfo(clusterConfig.NodeInstance);
            var installScript = this.GetInstallScript(hash, null, instanceInfo, clusterConfig.AdminUsername, clusterConfig.AdminPassword);

            var installResults = new List<InstallResult>();
            var result = this.InstallNode(instanceInfo, $"{clusterConfig.ClusterName}.node0", securityGroupId, clusterConfig.KeyName, installScript);
            installResults.Add(result);

            for (var i = 1; i < clusterConfig.NodeCount; i++)
            {
                installScript = this.GetInstallScript(hash, result.PrivateIpAddress, instanceInfo, clusterConfig.AdminUsername, clusterConfig.AdminPassword);
                var resultSlave = this.InstallNode(instanceInfo, $"{clusterConfig.ClusterName}.node0", securityGroupId, clusterConfig.KeyName, installScript);
                installResults.Add(resultSlave);
            }

            return installResults;
        }

        public InstallResult InstallNode(AmazonInstanceInfo instanceInfo, string nodeName, string securityGroupId, string keyName, IInstallScript installScript)
        {
            var instanceRequest = new RunInstancesRequest();
            instanceRequest.ImageId = "ami-7abd0209"; //centos
            instanceRequest.InstanceType = instanceInfo.InstanceType;
            instanceRequest.MinCount = 1;
            instanceRequest.MaxCount = 1;
            instanceRequest.KeyName = keyName;
            instanceRequest.SecurityGroupIds = new List<string>() { securityGroupId };

            var blockDeviceMappingSystem = new BlockDeviceMapping
            {
                DeviceName = "/dev/sda1",
                Ebs = new EbsBlockDevice
                {
                    DeleteOnTermination = true,
                    VolumeType = VolumeType.Gp2,
                    VolumeSize = 12
                }
            };

            var blockDeviceMappingData = new BlockDeviceMapping
            {
                DeviceName = "/dev/sda2",
                Ebs = new EbsBlockDevice
                {
                    DeleteOnTermination = true,
                    VolumeType = VolumeType.Io1,
                    Iops = 100,
                    VolumeSize = (int)Math.Ceiling(instanceInfo.Memory * 2)
                }
            };

            instanceRequest.BlockDeviceMappings.Add(blockDeviceMappingSystem);
            instanceRequest.BlockDeviceMappings.Add(blockDeviceMappingData);

            //Install Process can check in this log file
            //</var/log/cloud-init-output.log>
            instanceRequest.UserData = installScript.Create();

            var response = this._client.RunInstances(instanceRequest);

            var instance = response.Reservation.Instances.First();

            var installResult = new InstallResult();
            installResult.Name = nodeName;
            installResult.InstanceId = instance.InstanceId;
            installResult.PrivateIpAddress = instance.PrivateIpAddress;

            var tags = new List<Tag> { new Tag("Name", nodeName) };
            this._client.CreateTags(new CreateTagsRequest(new List<string>() { instance.InstanceId }, tags));

            if (response.HttpStatusCode == HttpStatusCode.OK)
            {
                installResult.Successful = true;
            }

            return installResult;
        }

        public CentOSInstallScript GetInstallScript(string erlangCookie, string clusterNodeIpAddress, AmazonInstanceInfo instanceInfo, string adminUsername, string adminPassword)
        {
            var installScript = new CentOSInstallScript();

            //Prepare Data Disk
            installScript.PrepareDataDisk();

            //Set Environment Variables - Erlang needed
            installScript.Add("export HOME=/tmp");

            //Erlang install
            installScript.Add("curl -O -s http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm");
            installScript.Add("rpm -i epel-release-7-8.noarch.rpm");
            installScript.Add("yum install erlang -y --enablerepo=epel");

            //RabbitMQ
            installScript.Add("yum install socat -y");
            installScript.Add("curl -O -s https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm");
            installScript.Add("rpm -Uvh rabbitmq-server-3.6.5-1.noarch.rpm");

            //RabbitMQ - Enable managament plugin
            installScript.Add("rabbitmq-plugins enable rabbitmq_management");

            #region  RabbitMQ Config

            //rabbitmq.config
            installScript.Add("cat <<EOT >> /etc/rabbitmq/rabbitmq.config");
            installScript.Add("[");
            installScript.Add("  {");
            installScript.Add("  rabbit,");
            installScript.Add("  [");
            installScript.Add("    { vm_memory_high_watermark, 0.8 },");
            installScript.Add("    { disk_free_limit, {mem_relative, 0.5} }");
            installScript.Add("  ]");
            installScript.Add("  }");
            installScript.Add("].");
            installScript.Add("EOT");

            //rabbitmq-env.conf
            installScript.Add("cat <<EOT >> /etc/rabbitmq/rabbitmq-env.conf");
            installScript.Add("RABBITMQ_MNESIA_BASE=/data/rabbitmq");
            installScript.Add("ulimit -S -n 4096");
            installScript.Add("EOT");

            #endregion

            //Add Cookie for Cluster
            installScript.Add($"echo \"{erlangCookie}\" > /var/lib/rabbitmq/.erlang.cookie");
            installScript.Add("chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie");
            installScript.Add("chmod 400 /var/lib/rabbitmq/.erlang.cookie");

            //Autostart Service
            installScript.Add("chkconfig rabbitmq-server on");

            //Create Data Directory
            installScript.Add("mkdir /data/rabbitmq/");
            installScript.Add("chown rabbitmq:rabbitmq /data/rabbitmq/");

            //SELinux Config
            installScript.Add("semanage fcontext -a -t rabbitmq_var_lib_t \"/data(/.*)?\"");
            installScript.Add("restorecon -Rv / data");

            //RabbitMQ - Start service
            installScript.Add("service rabbitmq-server start");

            //RabbitMQ - User Configuration
            if (String.IsNullOrEmpty(clusterNodeIpAddress))
            {
                installScript.Add($"rabbitmqctl add_user {adminUsername} {adminPassword}");
                installScript.Add($"rabbitmqctl set_permissions {adminUsername} \".*\" \".*\" \".*\"");
                installScript.Add($"rabbitmqctl set_user_tags {adminUsername} administrator");
            }

            //Cluster Add
            if (!String.IsNullOrEmpty(clusterNodeIpAddress))
            {
                var ip = clusterNodeIpAddress.Replace('.', '-');
                var clusterNode = $"rabbit@ip-{ip}";

                installScript.Add("rabbitmqctl stop_app");
                installScript.Add("rabbitmqctl reset");
                installScript.Add($"rabbitmqctl join_cluster {clusterNode}");
                installScript.Add("rabbitmqctl start_app");
            }

            return installScript;
        }
    }
}