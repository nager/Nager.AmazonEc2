using Amazon;
using Amazon.EC2;
using Amazon.EC2.Model;
using log4net;
using Nager.AmazonEc2.Helper;
using Nager.AmazonEc2.InstallScript;
using Nager.AmazonEc2.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;

namespace Nager.AmazonEc2.Project
{
    public class CentOs : ProjectBase
    {
        private static readonly ILog Log = LogManager.GetLogger(typeof(Couchbase));

        public CentOs(AmazonAccessKey accessKey, RegionEndpoint regionEnpoint) : base(accessKey, regionEnpoint)
        {
        }

        private string CreateSecurityGroup(string prefix)
        {
            var name = $"{prefix}.CentOs";
            var description = "This security group was generated by Nager.AmazonEc2 System";

            try
            {
                var result = base.Client.DescribeSecurityGroups(new DescribeSecurityGroupsRequest() { GroupNames = new List<string> { name } });
                if (result.HttpStatusCode == HttpStatusCode.OK)
                {
                    return result.SecurityGroups.Select(o => o.GroupId).FirstOrDefault();
                }
            }
            catch (AmazonEC2Exception exception)
            {
                if (exception.ErrorCode != "InvalidGroup.NotFound")
                {
                    return null;
                }
            }

            var createSecurityGroupRequest = new CreateSecurityGroupRequest(name, description);
            var createSecurityGroupResponse = base.Client.CreateSecurityGroup(createSecurityGroupRequest);

            if (createSecurityGroupResponse.HttpStatusCode != HttpStatusCode.OK)
            {
                return null;
            }

            //http://docs.couchbase.com/admin/admin/Install/install-networkPorts.html

            var ipPermissionSsh = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 22,
                ToPort = 22,
                IpRanges = new List<string>() { "0.0.0.0/0" },
            };

            var ingressRequest = new AuthorizeSecurityGroupIngressRequest();
            ingressRequest.GroupId = createSecurityGroupResponse.GroupId;
            ingressRequest.IpPermissions = new List<IpPermission>();
            ingressRequest.IpPermissions.Add(ipPermissionSsh);

            var ingressResponse = base.Client.AuthorizeSecurityGroupIngress(ingressRequest);
            if (ingressResponse.HttpStatusCode != HttpStatusCode.OK)
            {
                return null;
            }

            return createSecurityGroupResponse.GroupId;
        }

        public InstallResult Install(AmazonInstance amazonInstance, string name, string securityGroupId, string keyName, IInstallScript installScript)
        {
            var imageId = base.GetImageId("679593333241", "CentOS Linux 7 x86_64 HVM EBS 1602*");
            if (imageId == null)
            {
                Log.Error("InstallNode - imageId is null");
                return new InstallResult() { Successful = false };
            }

            var instanceInfo = InstanceInfoHelper.GetInstanceInfo(amazonInstance);

            var instanceRequest = new RunInstancesRequest();
            instanceRequest.ImageId = imageId;
            instanceRequest.InstanceType = instanceInfo.InstanceType;
            instanceRequest.MinCount = 1;
            instanceRequest.MaxCount = 1;
            instanceRequest.KeyName = keyName;
            instanceRequest.SecurityGroupIds = new List<string>() { securityGroupId };
            if (!string.IsNullOrEmpty(instanceInfo.AvailabilityZone))
            {
                instanceRequest.Placement = new Placement(instanceInfo.AvailabilityZone);
            }

            var blockDeviceMappingSystem = new BlockDeviceMapping
            {
                DeviceName = "/dev/xvda",
                Ebs = new EbsBlockDevice
                {
                    DeleteOnTermination = true,
                    Encrypted = true,
                    VolumeType = VolumeType.Gp2,
                    VolumeSize = 12,
                }
            };

            var blockDeviceMappingData = new BlockDeviceMapping
            {
                DeviceName = "/dev/sdb",
                Ebs = new EbsBlockDevice
                {
                    DeleteOnTermination = true,
                    Encrypted = true,
                    Iops = 100,
                    VolumeType = VolumeType.Io1,
                    VolumeSize = (int)Math.Ceiling(instanceInfo.Memory * 2),  
                }
            };

            instanceRequest.BlockDeviceMappings.Add(blockDeviceMappingSystem);
            instanceRequest.BlockDeviceMappings.Add(blockDeviceMappingData);

            //Install Process can check in this log file
            //</var/log/cloud-init-output.log>
            instanceRequest.UserData = installScript.Create();

            var response = base.Client.RunInstances(instanceRequest);
            var instance = response.Reservation.Instances.First();

            var installResult = new InstallResult();
            installResult.Name = name;
            installResult.InstanceId = instance.InstanceId;
            installResult.PrivateIpAddress = instance.PrivateIpAddress;

            var tags = new List<Tag> { new Tag("Name", name) };
            base.Client.CreateTags(new CreateTagsRequest(new List<string>() { instance.InstanceId }, tags));

            if (response.HttpStatusCode == HttpStatusCode.OK)
            {
                installResult.Successful = true;
            }

            return installResult;
        }
    }
}
