using Amazon.EC2;
using Amazon.EC2.Model;
using log4net;
using Nager.AmazonEc2.Helper;
using Nager.AmazonEc2.InstallScript;
using Nager.AmazonEc2.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;

namespace Nager.AmazonEc2.Project
{
    public class Elasticsearch
    {
        private static readonly ILog Log = LogManager.GetLogger(typeof(Elasticsearch));
        private AmazonEC2Client _client;

        public Elasticsearch(AmazonAccessKey accessKey)
        {
            this._client = new AmazonEC2Client(accessKey.AccessKeyId, accessKey.SecretKey, Amazon.RegionEndpoint.EUWest1);
        }

        private string CreateSecurityGroup(string prefix)
        {
            var name = $"{prefix}.Elasticsearch";
            var description = "This security group was generated by Nager.AmazonEc2 System";

            try
            {
                var result = this._client.DescribeSecurityGroups(new DescribeSecurityGroupsRequest() { GroupNames = new List<string> { name } });
                if (result.HttpStatusCode == HttpStatusCode.OK)
                {
                    return result.SecurityGroups.Select(o => o.GroupId).FirstOrDefault();
                }
            }
            catch (AmazonEC2Exception exception)
            {
                if (exception.ErrorCode != "InvalidGroup.NotFound")
                {
                    return null;
                }
            }

            var createSecurityGroupRequest = new CreateSecurityGroupRequest(name, description);
            var createSecurityGroupResponse = this._client.CreateSecurityGroup(createSecurityGroupRequest);

            if (createSecurityGroupResponse.HttpStatusCode != HttpStatusCode.OK)
            {
                return null;
            }

            var ipPermissionWebinterface = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 9200,
                ToPort = 9200,
                IpRanges = new List<string>() { "0.0.0.0/0" }
            };

            var ipPermissionTransport = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 9300,
                ToPort = 9300,
                UserIdGroupPairs = new List<UserIdGroupPair>() { new UserIdGroupPair() { GroupId = createSecurityGroupResponse.GroupId } }
            };

            var ipPermissionSsh = new IpPermission()
            {
                IpProtocol = "tcp",
                FromPort = 22,
                ToPort = 22,
                IpRanges = new List<string>() { "0.0.0.0/0" },
            };

            var ingressRequest = new AuthorizeSecurityGroupIngressRequest();
            ingressRequest.GroupId = createSecurityGroupResponse.GroupId;
            ingressRequest.IpPermissions = new List<IpPermission>();
            ingressRequest.IpPermissions.Add(ipPermissionWebinterface);
            ingressRequest.IpPermissions.Add(ipPermissionTransport);
            ingressRequest.IpPermissions.Add(ipPermissionSsh);

            var ingressResponse = this._client.AuthorizeSecurityGroupIngress(ingressRequest);
            if (ingressResponse.HttpStatusCode != HttpStatusCode.OK)
            {
                return null;
            }

            return createSecurityGroupResponse.GroupId;
        }

        public string GetManagementUrl(List<InstallResult> installResults)
        {
            var results = this._client.DescribeInstances(new DescribeInstancesRequest() { InstanceIds = new List<string> { installResults.First().InstanceId } });
            var publicUrl = results.Reservations[0]?.Instances[0]?.PublicDnsName;

            return $"http://{publicUrl}:9200/_plugin/hq/";
        }

        public List<InstallResult> InstallCluster(ElasticsearchClusterConfig clusterConfig)
        {
            Log.Debug("InstallCluster");

            if (String.IsNullOrEmpty(clusterConfig.DiscoveryAccessKey.AccessKeyId))
            {
                return null;
            }

            if (String.IsNullOrEmpty(clusterConfig.DiscoveryAccessKey.SecretKey))
            {
                return null;
            }

            var securityGroupId = this.CreateSecurityGroup(clusterConfig.Prefix);
            var installResults = new List<InstallResult>();

            InstallResult installResult;

            for (var i = 0; i < clusterConfig.MasterNodeCount; i++)
            {
                var nodeName = $"{clusterConfig.ClusterName}.master{i}";
                var instanceInfo = InstanceInfoHelper.GetInstanceInfo(clusterConfig.MasterNodeInstance);
                var installScript = this.CreateInstallScript(clusterConfig.ClusterName, nodeName, true, false, instanceInfo, clusterConfig.DiscoveryAccessKey, clusterConfig.MasterNodeCount);

                installResult = this.InstallNode(instanceInfo, clusterConfig.ClusterName, nodeName, securityGroupId, clusterConfig.KeyName, installScript);
                installResults.Add(installResult);
            }

            for (var i = 0; i < clusterConfig.DataNodeCount; i++)
            {
                var nodeName = $"{clusterConfig.ClusterName}.data{i}";
                var instanceInfo = InstanceInfoHelper.GetInstanceInfo(clusterConfig.MasterNodeInstance);
                var installScript = this.CreateInstallScript(clusterConfig.ClusterName, nodeName, false, true, instanceInfo, clusterConfig.DiscoveryAccessKey, clusterConfig.MasterNodeCount);

                installResult = this.InstallNode(instanceInfo, clusterConfig.ClusterName, nodeName, securityGroupId, clusterConfig.KeyName, installScript);
                installResults.Add(installResult);
            }

            for (var i = 0; i < clusterConfig.ClientNodeCount; i++)
            {
                var nodeName = $"{clusterConfig.ClusterName}.client{i}";
                var instanceInfo = InstanceInfoHelper.GetInstanceInfo(clusterConfig.MasterNodeInstance);
                var installScript = this.CreateInstallScript(clusterConfig.ClusterName, nodeName, false, false, instanceInfo, clusterConfig.DiscoveryAccessKey, clusterConfig.MasterNodeCount);

                installResult = this.InstallNode(instanceInfo, clusterConfig.ClusterName, nodeName, securityGroupId, clusterConfig.KeyName, installScript);
                installResults.Add(installResult);
            }

            return installResults;
        }

        public InstallResult InstallNode(AmazonInstanceInfo instanceInfo, string clusterName, string name, string securityGroupId, string keyName, IInstallScript installScript)
        {
            var instanceRequest = new RunInstancesRequest();
            instanceRequest.ImageId = "ami-7abd0209"; //centos
            instanceRequest.InstanceType = instanceInfo.InstanceType;
            instanceRequest.MinCount = 1;
            instanceRequest.MaxCount = 1;
            instanceRequest.KeyName = keyName;
            instanceRequest.SecurityGroupIds = new List<string>() { securityGroupId };

            var blockDeviceMappingSystem = new BlockDeviceMapping
            {
                DeviceName = "/dev/sda1",
                Ebs = new EbsBlockDevice
                {
                    DeleteOnTermination = true,
                    VolumeType = VolumeType.Gp2,
                    VolumeSize = 12
                }
            };

            var blockDeviceMappingData = new BlockDeviceMapping
            {
                DeviceName = "/dev/sda2",
                Ebs = new EbsBlockDevice
                {
                    DeleteOnTermination = true,
                    VolumeType = VolumeType.Io1,
                    Iops = 100,
                    VolumeSize = (int)Math.Ceiling(instanceInfo.Memory * 2)
                }
            };

            instanceRequest.BlockDeviceMappings.Add(blockDeviceMappingSystem);
            instanceRequest.BlockDeviceMappings.Add(blockDeviceMappingData);

            //Install Process can check in this log file
            //</var/log/cloud-init-output.log>
            instanceRequest.UserData = installScript.Create();

            var response = this._client.RunInstances(instanceRequest);
            var instance = response.Reservation.Instances.First();

            var installResult = new InstallResult();
            installResult.Name = name;
            installResult.InstanceId = instance.InstanceId;
            installResult.PrivateIpAddress = instance.PrivateIpAddress;

            var tags = new List<Tag> { new Tag("Name", name), new Tag("cluster", clusterName) };
            this._client.CreateTags(new CreateTagsRequest(new List<string>() { instance.InstanceId }, tags));

            if (response.HttpStatusCode == HttpStatusCode.OK)
            {
                installResult.Successful = true;
            }

            return installResult;
        }

        public CentOSInstallScript CreateInstallScript(string clusterName, string nodeName, bool masterNode, bool dataNode, AmazonInstanceInfo instanceInfo, AmazonAccessKey accessKey, int minimumMasterNodes)
        {
            var installScript = new CentOSInstallScript();

            //Prepare Data Disk
            installScript.PrepareDataDisk();

            //Disable Swap
            //(A swappiness of 1 is better than 0, since on some kernel versions a swappiness of 0 can invoke the OOM-killer)
            installScript.Add("sysctl vm.swappiness=1");
            installScript.Add("echo \"vm.swappiness = 1\" >> /etc/sysctl.conf");

            //Import Public Key
            installScript.Add("rpm --import http://packages.elasticsearch.org/GPG-KEY-elasticsearch");

            #region V 2.X

            installScript.Add("cat > /etc/yum.repos.d/elasticsearch.repo <<EOL");
            installScript.Add("[elasticsearch-2.x]");
            installScript.Add("name=Elasticsearch repository for 2.x packages");
            installScript.Add("baseurl=http://packages.elastic.co/elasticsearch/2.x/centos");
            installScript.Add("gpgcheck=1");
            installScript.Add("gpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch");
            installScript.Add("enabled=1");
            installScript.Add("EOL");

            #endregion

            installScript.Add("yum install java elasticsearch -y");

            //Autostart Service
            installScript.Add("chkconfig elasticsearch on");


            installScript.Add($"mkdir /data/{clusterName}");
            installScript.Add($"chown elasticsearch:elasticsearch /data/{clusterName}");

            #region Config file

            installScript.Add("cat > /etc/elasticsearch/elasticsearch.yml <<EOL");
            installScript.Add($"cluster.name: {clusterName}");
            installScript.Add($"node.name: {nodeName}");

            installScript.Add($"node.master: {masterNode.ToString().ToLower()}");
            installScript.Add($"node.data: {dataNode.ToString().ToLower()}");

            installScript.Add("path.data: /data");

            installScript.Add("network.host: _ec2_"); //cloud-aws needed _ec2_

            installScript.Add("http.compression: true");

            installScript.Add("http.cors.enabled: true");
            installScript.Add("http.cors.allow-origin: \"*\"");

            installScript.Add("index.max_result_window: \"2147483647\"");

            //AWS

            installScript.Add("plugin.mandatory: cloud-aws");
            installScript.Add($"cloud.aws.access_key: {accessKey.AccessKeyId}");
            installScript.Add($"cloud.aws.secret_key: {accessKey.SecretKey}");
            installScript.Add("cloud.aws.region: eu-west-1");

            installScript.Add("discovery.type: ec2");
            installScript.Add($"discovery.ec2.tag.cluster: {clusterName}");
            installScript.Add("discovery.ec2.host_type: private_ip");
            installScript.Add("discovery.ec2.ping_timeout: 30s");

            //AWS EC2 not support multicast
            installScript.Add("discovery.zen.ping.multicast.enabled: false");

            //Minimum Master Nodes
            installScript.Add($"discovery.zen.minimum_master_nodes: {minimumMasterNodes}");

            //This allows the JVM to lock its memory and prevent it from being swapped by the OS
            installScript.Add("bootstrap.mlockall: true");

            //disable allowing to delete indices via wildcards or _all
            installScript.Add("action.destructive_requires_name: true");

            installScript.Add("EOL");

            #endregion

            var heapSize = (int)Math.Ceiling(instanceInfo.Memory / 2);
            installScript.Add($"sed -i -e 's|#ES_HEAP_SIZE=2g|ES_HEAP_SIZE={heapSize}g|' /etc/sysconfig/elasticsearch");

            //Insall Management Interface
            installScript.Add("/usr/share/elasticsearch/bin/plugin install royrusso/elasticsearch-HQ");
            installScript.Add("/usr/share/elasticsearch/bin/plugin install cloud-aws -b");

            //Start Service
            installScript.Add("service elasticsearch start");

            return installScript;
        }
    }
}